Сервис-мессенджер

Для работы приложения требуется база данных с названием social_messenger. (Подключение по умолчанию postgres postgres)

В ходе разработки данного проекта были использованы технологии: Spring Boot, Spring Security, JPA, PostgreSQL, Liquibase, Swagger, JWT.

Реализованные основные задания: 
	* Регистрация и авторизация пользователя (необходимый API, хеширование паролей)
	* Аутентификация (необходимый API, поддержка Spring Security, информация о сессии в JWT и передача их в HTTP хедерах)
	* Выход из системы (необходимый API, инвалидация токенов)
	* Обновление данных своего профиля (необходимый API)
	* Обновление пароля отдельным запросом
	* Возможность удаление аккаунта (необходимый API, изменение статуса на "Удален", восстановление в течение 7 дней)
	* Возможность отправлять сообщения(необходимый API с проверкой на существование пользователя)
	* Просмотр истории сообщений с пользователем (необходимый API)

Реализованные дополнительные задания: 
	* Добавление друзей
		* Отправление, удаление, просмотр запросов на добавление в друзья
		* Просмотр, одобрение, отклолнение запросов на добавление в друзья
		* Просмотр списка своих друзей и друзей пользователя
		* Ограничение на получение сообщений (от всех пользователей, от друзей, ни от кого)
		* Возможность скрывать свой список друзей

Не реализовано:
	* Подтверждение e-mail (При отправке сообщения, smpt google не принимал пароль, хотя это был пароль для приложения)
	* Обмен сообщениями через веб-сокеты


Описание и примеры REST-запросов:
	AuthController:
		POST    /auth/login - проводит аутентификацию пользователя и возвращает JWT-токен
			URL example: localhost:8081/auth/login
			Payload: JwtRequest(input), JwtResponse(output)
			Response: 200 OK (успешная аутентификация и выдача токена)
				  400 Bad Request (неправильный логин или пароль)
				  403 Forbidden (доступ к удаленному аккаунуту)		

		DELETE  /auth/login - инвалидирует токен аутентифицированного пользователя
			URL example: localhost:8081/auth/logout
			Response: 204 No Content (токен успешно удален)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)
=========================================================================================================================		
	ProfileController:
		GET	/profiles - возвращает список всех пользователей
			URL example:localhost:8081/profiles
			Payload: List<ProfileDto>(output)
			Response: 200 OK (список пользователей успешно возвращен)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				  
		POST	/profiles - регистрирует нового пользователя c данными, указанными в теле запроса, возвращает URL созданного профиля (заголовок Location)
			URL example: localhost:8081/profiles
			Payload: CreateProfileRequest
			Response: 201 Created (пользователь успешно создан)
				  400 Bad Request (попытка регистриции существующего никнейма или email)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)

		PUT	/profiles - изменяет данные аутентифицированного пользователя на данные, указанные в теле запроса, возвращает данные пользователя после изменения 
			URL example: localhost:8081/profiles
			Payload: EditProfileRequest(input), ProfileDto(output)
			Response: 200 OK (успешное изменение профиля)
				  400 Bad Request (попытка присвоения существующего никнейма или email)
	
		PATCH	/profiles - изменяет пароль аутентифицированного пользователя на пароль, указанный в теле запроса
			URL example: localhost:8081/profiles
			Payload: ChangePasswordRequest(input)
			Response: 200 OK (успешная смена пароля)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)

		DELETE  /profiles - изменяет статус аутентифицированного пользователя на "Удален" с возможностью востановления в следующие 7 дней, инвалидирует JWT-токен
			URL example: localhost:8081/profiles
			Response: 204 No Content (успешное удаление аккаунта)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)
	
		PATCH	/profile/restore/{nickname} - изменяет статус пользователя с указанным никнеймом на "Активен", если он был удален не более 7 дней назад
			URL example: localhost:8081/profile/restore/2
			Response: 200 OK (успешное восстановление аккаунта)
				  400 BadRequest (вышло время востановления аккаунта)
				  404 Not Found (пользователь с таким никнеймом не найден)
=========================================================================================================================
	MessageController:
		GET	/messages - возвращает хронологический список сообщений аутентифицированного пользователя с пользователем, никнейм которого указан в параметре chatPartnerNickname
			URL example: localhost:8081/messages?chatPartnerNickname=john_doe
			Payload: List<MessageDto>(output)
			Responses: 200 OK (история сообщений успешно возвращена)
				   400 Bad Request (пользователь ограничил получение сообщений только от друзей или полностью запретил)
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				   404 Not Found (пользователь с таким именем не найден)
					
		POST	/messages - отправляет сообщение от лица аутентифицированного пользователя пользователю никнейм которого указан в параметре recipientNickname
			URL example: localhost:8081/messages?recipientUsername=john_doe
			Payload: SendMessageRequest(input)
			Responses: 200 Created (сообщение успешно отправлено)
			           401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				   404 Not Found (пользователь с таким именем не найден)
=========================================================================================================================
	FriendshipController:
		GET    	/friends - возвращает список друзей аутентифицированного пользователя
			URL example:localhost:8081/friends
			Payload: List<ProfileDto>(output)
			Responses: 200 OK (список друзей успешно возвращен)
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)

		DELETE 	/firends/{firendId} - удаляет пользователя с id равным friendId из списка друзей аутентифицированного пользователя
			URL example: localhost:8081/friends/1
			Responses: 201 No Content (пользователь успешно удален из списка друзей)
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				   404 Not found (пользователь с указанным id не найден в списке друзей)

		GET	/friends/{userId} - возвращает список друзей пользователя с id равным userId, если пользователь не скрыл его
			URL example: localhost:8081/friends/1
			Payload: List<ProfileDto>(output)
			Responses: 200 OK (список друзей пользователя успешно возвращен)
				   403 Forbidden (пользователь запретил доступ к своему списку друзей)
			  	   404 Not found (пользователь с указанным id не найден)

		GET	/friends/requests - возвращает список отправленных аутентифицированным пользователем заявок в друзья
			URL example: localhost:8081/friends/requests
			Payload: List<FriendshipDto>
			Responses: 200 OK (список отправленных заявок успешно возвращен
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)
					

		POST 	/friends/requests - отправляет заявку в друзья пользователю с id равным параметру friendId от имени аутентифицированного пользователя
			URL example: localhost:8081/friends/requests/
			Responses: 201 Created (заявка успешно отправлена, возвращает URL заявки (заголовок Location))
				   400 Bad request (заявка уже была отправлена этому пользователю или попытка отправить заявку самому себе)
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				   404 Not found (пользователь с указанным id не найден)

		DELETE 	/friends/requests/{requestId} - удаляет принадлежащую аутентифицированному пользователю заявку в друзья с id равным requestId
			URL example: localhost:8081/friends/requests/1
			Responses: 204 No content (успешное удаление заявки)
				   400 Bad Request (попытка удалить запрос, на который уже дали ответ)
				   401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				   403 Forbidden (заявка не принадлежит аутентифицированному пользователю)
				   404 Not found (заявка с указанным id не найдена)

		GET 	/friends/incoming - возвращает список входящих заявок в друзья аутентифицированному пользователю
			URL example: localhost:8081/friends/incoming
			Payload: List<FriendshipDto>(output)
			Response: 200 OK (список входящих заявок успешно возвращен)
			   	  401 Unauthorized (попытка доступа не аутентифицированного пользователя)

		PATCH	/friends/incoming/{requestId} - одобряет заявку в друзья аутентифицированному пользователю, если параметр isApproved равен true, иначе отклоняет ее
			URL example: localhost:8081/friends/incoming/1?isApproved=false
			Response: 200 OK (пользователь успешно ответил на заявку)
				  400 Bad request (попытка ответить на заявку, на которую уже был дан ответ)
				  401 Unauthorized (попытка доступа не аутентифицированного пользователя)
				  403 Forbidden (заявка не адресова аутентифицированному пользователю)
				  404 Not Found (заявка с указанным id не найдена)

	
		
	


